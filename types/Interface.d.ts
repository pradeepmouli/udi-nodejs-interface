import events from 'events';
import { MqttClient } from 'mqtt';
import { Node } from './Node.js';
import { ISY } from './isy.js';
interface Config {
    hasOwnProperty: any;
    logLevel: any;
    nodes: any;
    customparams: {
        [x: string]: any;
    };
    newParamsDetected: boolean;
}
export declare class Interface extends events.EventEmitter {
    isCloud: boolean;
    _mqttHost: any;
    _mqttPort: any;
    _mqttTopic: any;
    _mqttTopicPolyglotConnection: null;
    _profileNum: null;
    _mqttClient: MqttClient;
    _mqttClientConnected: boolean;
    _mqttPolyglotConnected: boolean;
    _config: Partial<Config>;
    _queue: any;
    _messageAsyncTracking: {};
    _shuttingDown: boolean;
    _nodeClasses: typeof Node[];
    _nodes: {};
    _configCounter: number;
    _noticesFormatObject: boolean;
    _keyedNotices: {};
    _customParams: {};
    _customData: {};
    _customTypedParams: {};
    _customTypedData: {};
    _isyInfo: null;
    _uuid: any;
    _token: any;
    id: string;
    _customdata: any;
    constructor(declaredNodeClasses: typeof Node[]);
    start(): Promise<void>;
    stop(): void;
    ready(): Promise<void>;
    _getEnvConfig(): Promise<unknown>;
    _mqttStart(): void;
    _onMessage(message: any): void;
    _onMessageQueued(opt: {
        messageKey: any;
        messageContent: any;
    }): Promise<any>;
    _setParamsDetected(oldConfig: Partial<Config>, newConfig: Partial<Config> & {
        newParamsDetected: boolean;
    }): void;
    _addNodeToList(node: {
        address: string | number;
        nodeDefId: string | number;
        primaryNode: any;
        name: any;
        nodedef: any;
    }): Node;
    _onConfig(config: Partial<Config>): void;
    _detectConfigLoop(): boolean;
    _onResult(messageKey: any, messageContent: any): void;
    _getController(): any;
    _sendMessage(message: any, type: any, retain?: boolean): void;
    isConnected(): boolean;
    sendMessage(message: any, type: any): void;
    sendMessageAsync(key: any, message: any, type: any, timeout?: number): Promise<any>;
    addNode(node: any): Promise<any>;
    getConfig(): Partial<Config>;
    getNodes(): {};
    getNode(address: any): any;
    delNode(node: any): void;
    updateProfile(): void;
    getNotices(): {};
    noticeExists(key: any): any;
    addNotice(key: any, text: any): void;
    addNoticeTemp(key: any, text: any, delaySec: any): void;
    removeNotice(key: any): void;
    removeNoticesAll(): void;
    getCustomParam(key: any): any;
    getCustomParams(): {};
    saveCustomParams(params: any): void;
    addCustomParams(params: any): void;
    removeCustomParams(key: any): void;
    saveTypedParams(typedParams: any): void;
    getTypedData(): {};
    getCustomData(key?: any): any;
    saveCustomData(data: any): void;
    addCustomData(data: any): void;
    removeCustomData(key: any): void;
    setCustomParamsDoc(html: any): void;
    restart(): void;
    setLogLevel(level: any): void;
    ISY(): ISY;
}
export {};
